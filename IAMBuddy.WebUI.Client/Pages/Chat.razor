@page "/chat"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http

<style>
    * {
        box-sizing: border-box;
    }

    .chat-layout {
        display: flex;
        position: fixed;
        top: 63px;
        left: 0;
        right: 0;
        bottom: 0;
        background: #f9fafb;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        overflow: hidden;
    }

    /* Sidebar Styles */
    .sidebar {
        width: 320px;
        background: white;
        border-right: 1px solid #e5e7eb;
        display: flex;
        flex-direction: column;
    }

    .sidebar-header {
        padding: 16px;
        border-bottom: 1px solid #e5e7eb;
    }

    .sidebar-icons {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 16px;
    }

    .icon-box {
        width: 32px;
        height: 32px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .icon-primary {
        background: #3b82f6;
        color: white;
    }

    .icon-secondary {
        background: #e5e7eb;
        color: #6b7280;
    }

    .notification-badge {
        margin-left: auto;
        width: 24px;
        height: 24px;
        background: #dbeafe;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
        font-weight: 600;
        color: #2563eb;
    }

    .create-chat-btn {
        width: 100%;
        background: #374151;
        color: white;
        border: none;
        padding: 10px 16px;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: background-color 0.2s;
    }

        .create-chat-btn:hover {
            background: #4b5563;
        }

    .chat-list {
        flex: 1;
        overflow-y: auto;
        padding: 8px;
    }

    .chat-item {
        background: #3b82f6;
        color: white;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 8px;
    }

    .chat-item-header {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 8px;
        font-weight: 500;
        font-size: 14px;
    }

    .chat-item-footer {
        display: flex;
        align-items: center;
        justify-content: space-between;
        font-size: 12px;
    }

    .token-badge {
        background: #374151;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 11px;
    }

    .chat-actions {
        display: flex;
        gap: 4px;
    }

    .action-btn {
        width: 16px;
        height: 16px;
        cursor: pointer;
        opacity: 0.8;
        transition: opacity 0.2s;
    }

        .action-btn:hover {
            opacity: 1;
        }

    /* Main Chat Area */
    .main-chat {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .chat-header {
        background: white;
        border-bottom: 1px solid #e5e7eb;
        padding: 16px 24px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .chat-title {
        font-size: 24px;
        font-weight: 400;
        color: #1f2937;
        margin: 0;
    }

    .header-controls {
        display: flex;
        align-items: center;
        gap: 16px;
    }

    .control-select {
        border: 1px solid #d1d5db;
        border-radius: 6px;
        padding: 6px 12px;
        font-size: 14px;
        background: white;
    }

    .clear-cache-btn {
        color: #3b82f6;
        background: none;
        border: none;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        text-decoration: none;
    }

        .clear-cache-btn:hover {
            color: #2563eb;
            text-decoration: underline;
        }

    /* Messages Area */
    .messages-container {
        flex: 1;
        overflow-y: auto;
        padding: 24px;
        display: flex;
        flex-direction: column;
        gap: 24px;
    }

    .message-wrapper {
        display: flex;
        align-items: flex-start;
        gap: 12px;
    }

    .message-avatar {
        width: 32px;
        height: 32px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
        font-size: 14px;
        font-weight: 600;
    }

    .user-avatar {
        background: #3b82f6;
        color: white;
    }

    .assistant-avatar {
        background: #10b981;
        color: white;
    }

    .message-content {
        flex: 1;
    }

    .message-header {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 4px;
    }

    .sender-name {
        font-weight: 600;
        color: #1f2937;
    }

    .token-info-badge {
        background: #dbeafe;
        color: #1d4ed8;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 500;
    }

    .message-timestamp {
        color: #6b7280;
        font-size: 14px;
    }

    .user-message-bubble {
        background: #f3f4f6;
        border-radius: 12px;
        padding: 12px 16px;
        color: #1f2937;
    }

    .assistant-message-container {
        width: 100%;
    }

    .assistant-header-bar {
        background: #10b981;
        color: white;
        padding: 8px 16px;
        border-radius: 12px 12px 0 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 14px;
        font-weight: 500;
    }

    .assistant-message-bubble {
        background: #ecfdf5;
        border: 1px solid #d1fae5;
        border-radius: 0 0 12px 12px;
        padding: 16px;
        color: #1f2937;
        font-size: 14px;
        line-height: 1.5;
    }

    .token-details {
        margin-top: 16px;
        padding-top: 12px;
        border-top: 1px solid #d1fae5;
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
    }

    .token-detail-item {
        background: #f3f4f6;
        padding: 4px 8px;
        border-radius: 8px;
        font-size: 12px;
        color: #6b7280;
        font-family: monospace;
    }

    /* Input Area */
    .input-container {
        background: white;
        border-top: 1px solid #e5e7eb;
        padding: 16px 24px;
    }

    .input-wrapper {
        /* max-width: 1024px; */
        margin: 0 auto;
        display: flex;
        align-items: flex-end;
        gap: 12px;
    }

    .input-avatar {
        width: 32px;
        height: 32px;
        background: #e5e7eb;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
        margin-bottom: 8px;
    }

    .input-field-container {
        flex: 1;
        position: relative;
    }

    .message-input {
        width: 100%;
        border: 1px solid #d1d5db;
        border-radius: 12px;
        padding: 12px 48px 12px 16px;
        font-size: 14px;
        resize: none;
        min-height: 44px;
        max-height: 120px;
        outline: none;
        transition: border-color 0.2s;
    }

        .message-input:focus {
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

    .send-button {
        position: absolute;
        right: 8px;
        bottom: 8px;
        width: 32px;
        height: 32px;
        background: #3b82f6;
        border: none;
        border-radius: 8px;
        color: white;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color 0.2s;
    }

        .send-button:hover:not(:disabled) {
            background: #2563eb;
        }

        .send-button:disabled {
            background: #d1d5db;
            cursor: not-allowed;
        }

    .loading-indicator {
        opacity: 0.7;
    }

    .spinner {
        width: 16px;
        height: 16px;
        border: 2px solid #e5e7eb;
        border-top: 2px solid #3b82f6;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

   /*  @@keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    } */

    /* Enhanced Form Styles */
    .enhanced-form {
        background: #f8fafc;
        border-radius: 12px;
        padding: 20px;
        margin-top: 16px;
        border: 1px solid #e2e8f0;
    }

        .enhanced-form h5 {
            color: #1e40af;
            margin-bottom: 16px;
            font-size: 16px;
            font-weight: 600;
        }

    .form-group {
        margin-bottom: 16px;
    }

    .form-label {
        display: block;
        font-weight: 500;
        color: #374151;
        margin-bottom: 6px;
        font-size: 14px;
    }

    .form-input {
        width: 100%;
        border: 1px solid #d1d5db;
        border-radius: 8px;
        padding: 8px 12px;
        font-size: 14px;
        transition: border-color 0.2s;
    }

        .form-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

    .form-submit-btn {
        width: 100%;
        background: #10b981;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 10px 16px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .form-submit-btn:hover {
            background: #059669;
        }

    .form-response {
        margin-top: 12px;
        color: #10b981;
        font-size: 14px;
    }
</style>

<div class="chat-layout">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="sidebar-header">
            <div class="sidebar-icons">
                <div class="icon-box icon-primary">💬</div>
                <div class="icon-box icon-secondary">🧠</div>
                <div class="notification-badge">2</div>
            </div>
            <button class="create-chat-btn">
                <span>+</span>
                Create New Chat
            </button>
        </div>
        <div class="chat-list">
            <div class="chat-item">
                <div class="chat-item-header">
                    <span>💬</span>
                    <span>Jhon, Doe</span>
                </div>
                <div class="chat-item-footer">
                    <div class="token-badge">Tokens Used: 1786</div>
                    <div class="chat-actions">
                        <span class="action-btn">✏️</span>
                        <span class="action-btn">🗑️</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Chat Area -->
    <div class="main-chat">
        <!-- Header -->
        <div class="chat-header">
            <h1 class="chat-title">Title</h1>            
        </div>

        <!-- Messages -->
        <div class="messages-container">
            @for (int i = 0; i < chatHistory.Count; i++)
            {
                var msg = chatHistory[i];
                if (msg.IsUser)
                {
                    <div class="message-wrapper">
                        <div class="message-avatar user-avatar">👤</div>
                        <div class="message-content">
                            <div class="message-header">
                                <span class="sender-name">User</span>
                                <span class="token-info-badge">Prompt Tokens: @((int)(msg.Text.Split(' ').Length * 1.2))</span>
                                <span class="message-timestamp">@msg.Timestamp.ToString("HH:mm")</span>
                            </div>
                            <div class="user-message-bubble">@msg.Text</div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="message-wrapper">
                        <div class="message-avatar assistant-avatar">🤖</div>
                        <div class="message-content">
                            <div class="assistant-message-container">
                                <div class="assistant-header-bar">
                                    <div style="display: flex; align-items: center; gap: 12px;">
                                        <span class="sender-name">Assistant</span>
                                        <span class="message-timestamp">@msg.Timestamp.ToString("HH:mm")</span>
                                    </div>
                                    @if (msg.TokenInfo != null)
                                    {
                                        <span class="token-info-badge">Completion Tokens: @msg.TokenInfo.PromptTokenCount</span>
                                    }
                                </div>
                                <div class="assistant-message-bubble">
                                    <div style="white-space: pre-wrap;">@msg.Text</div>
                                    @if (msg.TokenInfo != null)
                                    {
                                        <div class="token-details">
                                            <div class="token-detail-item">Cache Hit: False</div>
                                            <div class="token-detail-item">Generation Tokens: @msg.TokenInfo.CurrentCandidateTokenCount</div>
                                            <div class="token-detail-item">Completion Tokens: @msg.TokenInfo.PromptTokenCount</div>
                                            <div class="token-detail-item">Time: 15398 ms</div>
                                        </div>
                                    }
                                </div>
                            </div>

                            @* Show form below the last agent message if isSuccess and this is the last message *@
                            @if (isSuccess && i == chatHistory.Count - 1)
                            {
                                <EditForm Model="formModel" OnValidSubmit="HandleSubmit" class="enhanced-form">
                                    <DataAnnotationsValidator />
                                    <h5>Additional Information</h5>
                                    <div class="form-group">
                                        <label class="form-label" for="ServerName">Server Name</label>
                                        <InputText id="ServerName" @bind-Value="formModel.ServerName" class="form-input" />
                                        <ValidationMessage For="@(() => formModel.ServerName)" />
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label" for="UserName">User Name</label>
                                        <InputText id="UserName" @bind-Value="formModel.UserName" class="form-input" />
                                        <ValidationMessage For="@(() => formModel.UserName)" />
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label" for="DatabaseName">Database Name</label>
                                        <InputText id="DatabaseName" @bind-Value="formModel.DatabaseName" class="form-input" />
                                        <ValidationMessage For="@(() => formModel.DatabaseName)" />
                                    </div>
                                    <button type="submit" class="form-submit-btn">Submit</button>
                                </EditForm>
                                @if (!string.IsNullOrEmpty(formResponse))
                                {
                                    <div class="form-response">@formResponse</div>
                                }
                            }
                        </div>
                    </div>
                }
            }
            @if (isLoading)
            {
                <div class="message-wrapper loading-indicator">
                    <div class="message-avatar assistant-avatar">🤖</div>
                    <div class="message-content">
                        <div class="assistant-message-container">
                            <div class="assistant-header-bar">
                                <span>Assistant</span>
                            </div>
                            <div class="assistant-message-bubble">
                                <div style="display: flex; align-items: center; gap: 8px;">
                                    <div class="spinner"></div>
                                    <span>Thinking...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Input Area -->
        <div class="input-container">
            <div class="input-wrapper">
                <div class="input-avatar">📝</div>
                <div class="input-field-container">
                    @if (!showForm)
                    {
                        <textarea @bind="userInput"
                                  @onkeypress="HandleKeyPress"
                                  placeholder="Your Message"
                                  class="message-input"
                                  rows="1"></textarea>
                        <button class="send-button"
                                @onclick="HandleSubmit"
                                >
                            ➤
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool showForm => isSuccess && chatHistory.Count > 0 && !chatHistory[^1].IsUser;
    private string userInput = string.Empty;
    private string apiResponse = string.Empty;
    private bool isLoading = false;
    private bool isSuccess = false;

    private FormModel formModel = new();
    private string formResponse = string.Empty;

    private List<ChatMessage> chatHistory = new();

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await HandleSubmit();
        }
    }

    private async Task HandleSubmit()
    {
        isLoading = true;
        try
        {
            string message;
            if (showForm)
            {
                // Combine form data into a structured message
                message = $"Provisioning details:Server: {formModel.ServerName} User: {formModel.UserName} Database: {formModel.DatabaseName}";
                chatHistory.Add(new ChatMessage { Text = message, IsUser = true });
                chatHistory.Add(new ChatMessage { Text = $"use notification tool and send approval notification to Recipients mady2469@gmail.com, template is {message} and Subject is approve request ", IsUser = true });
                isSuccess = false; // Hide the form after submission
            }
            else
            {
                message = userInput;
                chatHistory.Add(new ChatMessage { Text = userInput, IsUser = true });
                userInput = string.Empty;
            }

            // Get previous conversation context
            var conversationHistory = string.Join("\n", chatHistory.Select(m => $"{(m.IsUser ? "User" : "Assistant")}: {m.Text}"));
            var fullMessage = $"{conversationHistory}\nUser: {message}";

            var response = await Http.PostAsJsonAsync("Orchestrator/chat", fullMessage);
            if (response.IsSuccessStatusCode)
            {
                var agentResponse = await response.Content.ReadFromJsonAsync<AgentResponse>();
                if (agentResponse != null)
                {
                    chatHistory.Add(new ChatMessage
                    {
                        Text = agentResponse.Message,
                        IsUser = false,
                        TokenInfo = agentResponse
                    });
                    isSuccess = !showForm; // Only set success to true for regular messages
                    formResponse = string.Empty;
                }
            }
            else
            {
                var errorMessage = $"Error: {response.StatusCode}";
                chatHistory.Add(new ChatMessage { Text = errorMessage, IsUser = false });
                if (showForm)
                {
                    formResponse = errorMessage;
                }
            }
        }
        catch (Exception ex)
        {
            var errorMessage = $"Exception: {ex.Message}";
            chatHistory.Add(new ChatMessage { Text = errorMessage, IsUser = false });
            if (showForm)
            {
                formResponse = errorMessage;
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    public class FormModel
    {
        [Required]
        public string ServerName { get; set; } = string.Empty;
        [Required]
        public string UserName { get; set; } = string.Empty;
        [Required]
        public string DatabaseName { get; set; } = string.Empty;
    }

    public class ChatMessage
    {
        public string Text { get; set; } = string.Empty;
        public bool IsUser { get; set; }
        public AgentResponse? TokenInfo { get; set; }
        public DateTime Timestamp { get; set; } = DateTime.Now;
    }

    public class AgentResponse
    {
        public string Message { get; set; }
        public int PromptTokenCount { get; set; }
        public int CurrentCandidateTokenCount { get; set; }
        public int CandidatesTokenCount { get; set; }
        public int TotalTokenCount { get; set; }
    }
}