@page "/"  
@using System.Text.RegularExpressions  
@using Microsoft.SemanticKernel  
@using Microsoft.SemanticKernel.Connectors.Google;  
@using ModelContextProtocol.Client  
@using System.Text  
@attribute [StreamRendering(true)]  

@code {  
#pragma warning disable SKEXP0070
    protected override async Task OnInitializedAsync()  
    {
        var kernel = Kernel.CreateBuilder()  
            .AddGoogleAIGeminiChatCompletion(  
                modelId: "gemini-2.5-flash",  
                apiKey: "hello")  
            .Build();  

        var approvalMCPClient = await McpClientFactory.CreateAsync(
            new SseClientTransport(new SseClientTransportOptions()
            {
                Endpoint = new Uri("http://localhost:8011/sse")
            }),
            new McpClientOptions()
            { 
                ClientInfo = new() { Name = "ApprovalMCPClient", Version = "1.0.0" } 
            });

        var approvalTools = await approvalMCPClient.ListToolsAsync();

        // Print approval mcp tools
        foreach (var tool in approvalTools)
        {
            Console.WriteLine($" - {tool.Name}: {tool.Description}");
        }

        var provisioningMCPClient = await McpClientFactory.CreateAsync(
            new SseClientTransport(new SseClientTransportOptions()
            {
                Endpoint = new Uri("http://localhost:8013/sse")
            }),
            new McpClientOptions()
            {
                ClientInfo = new() { Name = "ProvisioningMCPClient", Version = "1.0.0" }
            });

        var provisioningTools = await provisioningMCPClient.ListToolsAsync();

        // Print provisioning mcp tools
        foreach (var tool in provisioningTools)
        {
            Console.WriteLine($" - {tool.Name}: {tool.Description}");
        }

        var requestIntakeMCPClient = await McpClientFactory.CreateAsync(
            new SseClientTransport(new SseClientTransportOptions()
            {
                Endpoint = new Uri("http://localhost:8014/sse")
            }),
            new McpClientOptions()
            {
                ClientInfo = new() { Name = "RequestIntakeMCPClient", Version = "1.0.0" }
            });

        var requestIntakeTools = await requestIntakeMCPClient.ListToolsAsync();

        // Print provisioning mcp tools
        foreach (var tool in requestIntakeTools)
        {
            Console.WriteLine($" - {tool.Name}: {tool.Description}");
        }
    }  
#pragma warning restore SKEXP0070
}