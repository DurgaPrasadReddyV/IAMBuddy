// <auto-generated />
using System;
using IAMBuddy.SqlServerManagementService;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IAMBuddy.SqlServerManagementService.Migrations
{
    [DbContext(typeof(SqlServerManagementDbContext))]
    partial class SqlServerManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IAMBuddy.SqlServerManagementService.Models.SqlServerLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LoginType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("PasswordExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServerInstance")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Sid")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("LoginName", "ServerInstance")
                        .IsUnique();

                    b.ToTable("SqlServerLogins");
                });

            modelBuilder.Entity("IAMBuddy.SqlServerManagementService.Models.SqlServerOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DatabaseName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("DurationMs")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("LoginId")
                        .HasColumnType("int");

                    b.Property<string>("OperationDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ResourceName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RoleAssignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("ServerInstance")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("LoginId");

                    b.HasIndex("RequestId");

                    b.HasIndex("RoleAssignmentId");

                    b.HasIndex("RoleId");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.ToTable("SqlServerOperations");
                });

            modelBuilder.Entity("IAMBuddy.SqlServerManagementService.Models.SqlServerRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DatabaseName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsBuiltIn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ServerInstance")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("RoleName", "ServerInstance", "DatabaseName")
                        .IsUnique()
                        .HasFilter("[DatabaseName] IS NOT NULL");

                    b.ToTable("SqlServerRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(7240),
                            Description = "Members can perform any activity in the server",
                            IsBuiltIn = true,
                            IsEnabled = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(7240),
                            RoleName = "sysadmin",
                            RoleType = "Server",
                            ServerInstance = "Default"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8400),
                            Description = "Members can change server-wide configuration options and shut down the server",
                            IsBuiltIn = true,
                            IsEnabled = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8400),
                            RoleName = "serveradmin",
                            RoleType = "Server",
                            ServerInstance = "Default"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8400),
                            Description = "Members can manage logins and their properties",
                            IsBuiltIn = true,
                            IsEnabled = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8400),
                            RoleName = "securityadmin",
                            RoleType = "Server",
                            ServerInstance = "Default"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8400),
                            Description = "Members can end processes that are running in an instance of SQL Server",
                            IsBuiltIn = true,
                            IsEnabled = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8400),
                            RoleName = "processadmin",
                            RoleType = "Server",
                            ServerInstance = "Default"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8400),
                            Description = "Members can add and remove linked servers",
                            IsBuiltIn = true,
                            IsEnabled = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8400),
                            RoleName = "setupadmin",
                            RoleType = "Server",
                            ServerInstance = "Default"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8400),
                            Description = "Members can run the BULK INSERT statement",
                            IsBuiltIn = true,
                            IsEnabled = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8400),
                            RoleName = "bulkadmin",
                            RoleType = "Server",
                            ServerInstance = "Default"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8410),
                            Description = "Members can manage disk files",
                            IsBuiltIn = true,
                            IsEnabled = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8410),
                            RoleName = "diskadmin",
                            RoleType = "Server",
                            ServerInstance = "Default"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8410),
                            Description = "Members can create, alter, drop, and restore any database",
                            IsBuiltIn = true,
                            IsEnabled = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8410),
                            RoleName = "dbcreator",
                            RoleType = "Server",
                            ServerInstance = "Default"
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8410),
                            Description = "Every SQL Server login belongs to the public server role",
                            IsBuiltIn = true,
                            IsEnabled = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8410),
                            RoleName = "public",
                            RoleType = "Server",
                            ServerInstance = "Default"
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8410),
                            DatabaseName = "Default",
                            Description = "Members can perform all configuration and maintenance activities on the database",
                            IsBuiltIn = true,
                            IsEnabled = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8410),
                            RoleName = "db_owner",
                            RoleType = "Database",
                            ServerInstance = "Default"
                        },
                        new
                        {
                            Id = 11,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8540),
                            DatabaseName = "Default",
                            Description = "Members can add or remove access to the database for Windows logins, Windows groups, and SQL Server logins",
                            IsBuiltIn = true,
                            IsEnabled = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8540),
                            RoleName = "db_accessadmin",
                            RoleType = "Database",
                            ServerInstance = "Default"
                        },
                        new
                        {
                            Id = 12,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8540),
                            DatabaseName = "Default",
                            Description = "Members can modify role membership and manage permissions",
                            IsBuiltIn = true,
                            IsEnabled = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8540),
                            RoleName = "db_securityadmin",
                            RoleType = "Database",
                            ServerInstance = "Default"
                        },
                        new
                        {
                            Id = 13,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8540),
                            DatabaseName = "Default",
                            Description = "Members can run any Data Definition Language (DDL) command in a database",
                            IsBuiltIn = true,
                            IsEnabled = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8540),
                            RoleName = "db_ddladmin",
                            RoleType = "Database",
                            ServerInstance = "Default"
                        },
                        new
                        {
                            Id = 14,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8540),
                            DatabaseName = "Default",
                            Description = "Members can back up the database",
                            IsBuiltIn = true,
                            IsEnabled = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8540),
                            RoleName = "db_backupoperator",
                            RoleType = "Database",
                            ServerInstance = "Default"
                        },
                        new
                        {
                            Id = 15,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8550),
                            DatabaseName = "Default",
                            Description = "Members can read all data from all user tables",
                            IsBuiltIn = true,
                            IsEnabled = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8550),
                            RoleName = "db_datareader",
                            RoleType = "Database",
                            ServerInstance = "Default"
                        },
                        new
                        {
                            Id = 16,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8550),
                            DatabaseName = "Default",
                            Description = "Members can add, change, or delete data from all user tables",
                            IsBuiltIn = true,
                            IsEnabled = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8550),
                            RoleName = "db_datawriter",
                            RoleType = "Database",
                            ServerInstance = "Default"
                        },
                        new
                        {
                            Id = 17,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8550),
                            DatabaseName = "Default",
                            Description = "Members cannot read any data in the user tables within a database",
                            IsBuiltIn = true,
                            IsEnabled = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8550),
                            RoleName = "db_denydatareader",
                            RoleType = "Database",
                            ServerInstance = "Default"
                        },
                        new
                        {
                            Id = 18,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8550),
                            DatabaseName = "Default",
                            Description = "Members cannot add, modify, or delete any data in the user tables within a database",
                            IsBuiltIn = true,
                            IsEnabled = true,
                            ModifiedBy = "System",
                            ModifiedDate = new DateTime(2025, 6, 20, 11, 4, 31, 819, DateTimeKind.Utc).AddTicks(8550),
                            RoleName = "db_denydatawriter",
                            RoleType = "Database",
                            ServerInstance = "Default"
                        });
                });

            modelBuilder.Entity("IAMBuddy.SqlServerManagementService.Models.SqlServerRoleAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignmentReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DatabaseName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LoginId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("ServerInstance")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LoginId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("SqlServerRoleAssignments", t =>
                        {
                            t.HasCheckConstraint("CK_RoleAssignment_LoginOrUser", "(LoginId IS NOT NULL AND UserId IS NULL) OR (LoginId IS NULL AND UserId IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("IAMBuddy.SqlServerManagementService.Models.SqlServerUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DefaultSchema")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("LoginId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ServerInstance")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Sid")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LoginId");

                    b.HasIndex("UserName", "DatabaseName", "ServerInstance")
                        .IsUnique();

                    b.ToTable("SqlServerUsers");
                });

            modelBuilder.Entity("IAMBuddy.SqlServerManagementService.Models.SqlServerOperation", b =>
                {
                    b.HasOne("IAMBuddy.SqlServerManagementService.Models.SqlServerLogin", "Login")
                        .WithMany("Operations")
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IAMBuddy.SqlServerManagementService.Models.SqlServerRoleAssignment", "RoleAssignment")
                        .WithMany("Operations")
                        .HasForeignKey("RoleAssignmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IAMBuddy.SqlServerManagementService.Models.SqlServerRole", "Role")
                        .WithMany("Operations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IAMBuddy.SqlServerManagementService.Models.SqlServerUser", "User")
                        .WithMany("Operations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Login");

                    b.Navigation("Role");

                    b.Navigation("RoleAssignment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IAMBuddy.SqlServerManagementService.Models.SqlServerRoleAssignment", b =>
                {
                    b.HasOne("IAMBuddy.SqlServerManagementService.Models.SqlServerLogin", "Login")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IAMBuddy.SqlServerManagementService.Models.SqlServerRole", "Role")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IAMBuddy.SqlServerManagementService.Models.SqlServerUser", "User")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Login");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IAMBuddy.SqlServerManagementService.Models.SqlServerUser", b =>
                {
                    b.HasOne("IAMBuddy.SqlServerManagementService.Models.SqlServerLogin", "Login")
                        .WithMany("Users")
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Login");
                });

            modelBuilder.Entity("IAMBuddy.SqlServerManagementService.Models.SqlServerLogin", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("RoleAssignments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("IAMBuddy.SqlServerManagementService.Models.SqlServerRole", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("RoleAssignments");
                });

            modelBuilder.Entity("IAMBuddy.SqlServerManagementService.Models.SqlServerRoleAssignment", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("IAMBuddy.SqlServerManagementService.Models.SqlServerUser", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("RoleAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
